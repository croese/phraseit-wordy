var assert = require("assert");

var Phraseit = require('../index.js');

describe('Phraseit:', function() {

  it('should exist', function() {
    assert(Phraseit);
  });

  describe('Default', function() {

    describe('# Words', function() {

      it('should include a list of nouns', function() {
        assert(Phraseit._nouns.length);
      });

      it('should include a list of adjectives', function() {
        assert(Phraseit._adjectives.length);
      });

    });

    describe('# Actions', function() {

      it('should include `noun`', function() { assert(Phraseit.actions.noun); });
      it('should include `a_noun`', function() { assert(Phraseit.actions.a_noun); });
      it('should include `adjective`', function() { assert(Phraseit.actions.adjective); });
      it('should include `an_adjective`', function() { assert(Phraseit.actions.an_adjective); });

    });

  });

  describe('API', function() {

    it('should include a `configure` function', function() {
      assert(Phraseit.configure);
    });

    it('should merge a new action', function() {
      Phraseit.configure({
        actions: {
          firstNewAction: function() { return 'hello'; }
        }
      });

      assert.equal(Phraseit.actions.firstNewAction(), 'hello');
    });

    it('should accept another action merge later', function() {
      Phraseit.configure({
        actions: {
          secondNewAction: function() { return 'hello again'; }
        }
      });

      assert.equal(Phraseit.actions.firstNewAction(), 'hello', 'first action still exists');
      assert.equal(Phraseit.actions.secondNewAction(), 'hello again', 'second action exists as well');
    });

    it('should include a `make` function', function() {
      assert(Phraseit.make);
    });

  });

  describe('Templating', function() {

    describe('# Default Actions', function() {

      it('{{ noun }}', function(){  assert(Phraseit.make('{{ noun }}'));  });
      it('{{ a_noun }}', function(){  assert(Phraseit.make('{{ a_noun }}'));  });
      it('{{ adjective }}', function(){  assert(Phraseit.make('{{ adjective }}'));  });
      it('{{ an_adjective }}', function(){  assert(Phraseit.make('{{ an_adjective }}'));  });

    });

    describe('# Custom Actions', function() {

      it('{{ firstNewAction }}', function(){
        assert.equal(Phraseit.make('{{ firstNewAction }}'), 'hello');
      });

      it('{{ secondNewAction }}', function(){
        assert.equal(Phraseit.make('{{ secondNewAction }}'), 'hello again');
      });

      it('should return {{ action }} if it does not exist', function(){
        assert.equal( Phraseit.make('{{ nonexistant thing }}'), '{{ nonexistant thing }}');
      });

    });

    describe('# Custom Actions With Arguments', function() {

      Phraseit.configure({
        actions: {
          withArgument: function(number) {
            return number;
          },
          withArguments: function() {
            return arguments.length;
          }
        }
      });

      it('should allow an action with one argument', function() {
        assert.equal( Phraseit.make('{{ withArgument(1) }}'), '1' );
      });

      it('should allow an action with multiple arguments', function() {
        assert.equal( Phraseit.make('{{ withArguments(1,2,3) }}'), '3' );
      });

      it('should fail silently if an action with arguments does not exist', function() {
        assert.deepEqual( Phraseit.make('{{ nonExistantThing(1,2,3) }}'), '' );
      });

    });

  });

  describe('Test Print', function() {

    it('should have logged a sentence', function() {
      console.log( Phraseit.make("      Here is {{ an_adjective }} sentence generated by Phraseit's {{ noun }}.") );
    });

  });

});
